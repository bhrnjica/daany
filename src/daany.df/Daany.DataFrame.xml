<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Daany.DataFrame</name>
    </assembly>
    <members>
        <member name="T:Daany.DataFrame">
            <summary>
            Class implementation for DataFrame. The DataFrame is going to be C# specific implementation
            to handle data loading from files, grouping, sorting, filtering, handling with columns and rows
            accessing data frame (df) elements etc.
            </summary>
            <summary>
            Class implementation for DataFrame. The DataFrame is going to be C# specific implementation
            to handle data loading from files, grouping, sorting, filtering, handling with columns and rows
            accessing data frame (df) elements etc.
            </summary>
            <summary>
            Class implementation for DataFrame. The DataFrame is going to be C# specific implementation
            to handle data loading from files, grouping, sorting, filtering, handling with columns and rows
            accessing data frame (df) elements etc.
            </summary>
        </member>
        <member name="P:Daany.DataFrame.Columns">
            <summary>
            List of columns (names) in the data frame.
            </summary>
            
        </member>
        <member name="P:Daany.DataFrame.ColTypes">
            <summary>
            Types of columns (names) in the data frame.
            </summary>
            
        </member>
        <member name="P:Daany.DataFrame.Index">
            <summary>
            Index for rows in the data frame.
            </summary>
            
        </member>
        <member name="P:Daany.DataFrame.NAN">
            <summary>
            Representation of missing value.
            </summary>
            
        </member>
        <member name="F:Daany.DataFrame._colsType">
            <summary>
            Data type for each data frame column.
            </summary>
            
        </member>
        <member name="F:Daany.DataFrame._values">
            <summary>
            1D element contains data frame values
            </summary>
            
        </member>
        <member name="M:Daany.DataFrame.GetEnumerator``1(System.Func{System.Collections.Generic.IDictionary{System.String,System.Object},``0})">
            <summary>
            Returns strongly typed row enumerator.
            </summary>
            <typeparam name="TRow"></typeparam>
            <param name="callBack">Dictionary of the current row.</param>
            <returns>Strongly type object representing the data frame row.</returns>
        </member>
        <member name="M:Daany.DataFrame.GetEnumerator">
            <summary>
            Return row enumerators by returning row as dictionary 
            </summary>
            <returns>dictionary</returns>
        </member>
        <member name="M:Daany.DataFrame.GetRowEnumerator">
            <summary>
            Return row enumerators by returning object array
            </summary>
            <returns>object array</returns>
        </member>
        <member name="M:Daany.DataFrame.#ctor(Daany.DataFrame)">
            <summary>
            Create data frame from another data frame.
            </summary>
            <param name="dataFrame">Existing data frame.</param>
        </member>
        <member name="M:Daany.DataFrame.#ctor(System.Object[],System.Collections.Generic.IList{System.Int32},System.Collections.Generic.IList{System.String})">
            <summary>
            Create data frame from the 1d array values, list of indexed rows and list of column names.
            </summary>
            <param name="data">1d object array of values.</param>
            <param name="index">Row index.</param>
            <param name="columns">List of column names.</param>
        </member>
        <member name="M:Daany.DataFrame.#ctor(System.Object[],System.Collections.Generic.IList{System.String})">
            <summary>
            Create data frame from the 1d array values.
            </summary>
            <param name="data">1d object array of values</param>
            <param name="columns">List of column names.</param>
        </member>
        <member name="M:Daany.DataFrame.#ctor(System.Collections.Generic.List{System.Object},System.Collections.Generic.List{System.Object},System.Collections.Generic.List{System.String},Daany.ColType[])">
            <summary>
            Create data frame by list of values, row index, column types and column names
            </summary>
            <param name="data">list of df values </param>
            <param name="index">row index</param>
            <param name="columns">column index</param>
        </member>
        <member name="M:Daany.DataFrame.#ctor(System.Collections.Generic.List{System.Object},System.Collections.Generic.List{System.String},Daany.ColType[])">
            <summary>
            Create data frame by list of values and column names.
            </summary>
            <param name="data">List of data frame values.</param>
            <param name="columns">List of column names.</param>
        </member>
        <member name="M:Daany.DataFrame.#ctor(System.Collections.Generic.IDictionary{System.String,System.Collections.Generic.List{System.Object}},System.Collections.Generic.IList{System.Object})">
            <summary>
            Create data frame from dictionary.
            </summary>
            <param name="data">Data provided in dictionary collection.</param>
        </member>
        <member name="M:Daany.DataFrame.Create(System.ValueTuple{System.String,System.String}[])">
            <summary>
            Create new data frame from the existing by changing column names  
            </summary>
            <param name="colNames">List of old and new column names.</param>
            <returns>New data frame with renamed column names.</returns>
        </member>
        <member name="M:Daany.DataFrame.CreateEmpty(System.Collections.Generic.List{System.String})">
            <summary>
            Create empty data frame with specified column list.
            </summary>
            <param name="columns">Column name list.</param>
            <returns></returns>
        </member>
        <member name="M:Daany.DataFrame.SetColumnType(System.String,Daany.ColType)">
            <summary>
            Change the type for specified column
            </summary>
            <param name="columnName"></param>
            <param name="colType"></param>
        </member>
        <member name="M:Daany.DataFrame.AddColumns(System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.Object}})">
            <summary>
            Add one or more column into current data frame and returns new data frame with added columns.
            </summary>
            <param name="cols">list of columns</param>
            <returns>New data frame with added columns.</returns>
        </member>
        <member name="M:Daany.DataFrame.Append(Daany.DataFrame,System.Boolean)">
            <summary>
            Append new data frame at the end of the data frame
            </summary>
            <param name="df">DataFrame to be appended. </param>
            <param name="verticaly"> if true DataFrame will be added row by row, otherwise DataFrame will be added column by column </param>
        </member>
        <member name="M:Daany.DataFrame.AddRow(System.Collections.Generic.List{System.Object},System.Object)">
            <summary>
            Add one row in the data frame
            </summary>
            <param name="row">List of row values</param>
        </member>
        <member name="M:Daany.DataFrame.AddCalculatedColumn(System.String,System.Func{System.Collections.Generic.IDictionary{System.String,System.Object},System.Int32,System.Object})">
            <summary>
            Add additional column into DataFrame. The values of the additional column is calculated by calling Func delegate for each row.
            </summary>
            <param name="colName">New column names.</param>
            <param name="callBack">delegate for the calculation</param>
            <returns>True if column added successfully </returns>
        </member>
        <member name="M:Daany.DataFrame.AddCalculatedColumn(System.String,System.Func{System.Object[],System.Int32,System.Object})">
            <summary>
            Add additional column into DataFrame. The values of the additional column is calculated by calling Func delegate for each row.
            </summary>
            <param name="colName">New column names.</param>
            <param name="callBack">delegate for the calculation</param>
            <returns>True if column added successfully </returns>
        </member>
        <member name="M:Daany.DataFrame.AddCalculatedColumns(System.String[],System.Func{System.Collections.Generic.IDictionary{System.String,System.Object},System.Int32,System.Object[]})">
            <summary>
            Add additional columns into DataFrame. The values of the columns are 
            calculated by calling Func delegate for each row.
            </summary>
            <param name="colNames">New column names</param>
            <param name="callBack">Callback for calculation new columns.</param>
            <returns></returns>
        </member>
        <member name="M:Daany.DataFrame.AddCalculatedColumns(System.String[],System.Func{System.Object[],System.Int32,System.Object[]})">
            <summary>
            Add additional columns into DataFrame. The values of the columns are 
            calculated by calling Func delegate for each row.
            </summary>
            <param name="colNames">New column names</param>
            <param name="callBack">Callback for calculation new columns.</param>
            <returns></returns>
        </member>
        <member name="M:Daany.DataFrame.Aggragate(System.Collections.Generic.IDictionary{System.String,Daany.Aggregation},System.Boolean)">
            <summary>
            Perform aggregate operation on the list of columns. For incomplete list, the rest of the column will be ommited
            </summary>
            <param name="indCols">indexes of the columns</param>
            <param name="agg"></param>
            <returns>List of aggregated values</returns>
        </member>
        <member name="M:Daany.DataFrame.Aggragate(System.Collections.Generic.IDictionary{System.String,Daany.Aggregation[]})">
            <summary>
            Perform aggregate operation on the list of columns. 
            For one column it can be setup more than one aggregate operations
            </summary>
            <param name="indCols">indexes of the columns</param>
            <param name="agg"></param>
            <returns></returns>
        </member>
        <member name="M:Daany.DataFrame.Clip(System.Single,System.Single)">
            <summary>
            Clip all data frame values between the bounds
            </summary>
            <param name="minValue">min value</param>
            <param name="maxValue">max value</param>
            <returns></returns>
        </member>
        <member name="M:Daany.DataFrame.Clip(System.Single,System.Single,System.String[])">
            <summary>
            Clip all values for specified columns between the bounds in the DataFrame
            </summary>
            <param name="minValue">min values</param>
            <param name="maxValue">max values</param>
            <param name="columns">list of columns</param>
            <returns></returns>
        </member>
        <member name="M:Daany.DataFrame.Describe(System.Boolean,System.String[])">
            <summary>
            Creates new data frame of basic descriptive statistics values of the data frame
            </summary>
            <param name="numericOnly"></param>
            <param name="inclColumns"></param>
            <returns></returns>
        </member>
        <member name="M:Daany.DataFrame.MissingValues">
            <summary>
            Returns the dictionary containing missing values
            </summary>
            <returns>Dictionary with specified column and number of missing value in it.</returns>
        </member>
        <member name="M:Daany.DataFrame.Drop(System.String[])">
            <summary>
            Removes specified columns from the data frame.
            </summary>
            <param name="colName">List of column names to be removed.</param>
            <returns></returns>
        </member>
        <member name="M:Daany.DataFrame.DropNA(System.String[])">
            <summary>
            Removes rows with missing values for specified set of columns. In case cols is null, removed values 
            will be applied to all columns.
            </summary>
            <param name="cols">List of columns</param>
            <returns>New df with fixed NAN</returns>
        </member>
        <member name="M:Daany.DataFrame.FillNA(System.Object)">
            <summary>
            Replace NAN values with specified value.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Daany.DataFrame.FillNA(System.String,System.Object)">
            <summary>
            Replaces the missing values from specified column with 'replacedValue'. 
            </summary>
            <param name="col">Column to replace the missing value</param>
            <param name="replacedValue">Replaced value</param>
        </member>
        <member name="M:Daany.DataFrame.FillNA(System.String,Daany.Aggregation)">
            <summary>
            Replaces the missing values from specified column with 'replacedValue'. 
            </summary>
            <param name="col">Column to replace the missing value</param>
            <param name="aggValue">Aggregated Value of the column</param>
        </member>
        <member name="M:Daany.DataFrame.FillNA(System.String[],System.Object)">
            <summary>
            Replaces the missing values from specified columns with 'replacedValue'. 
            </summary>
            <param name="col">Column to replace the missing value</param>
            <param name="replacedValue">Replaced value</param>
        </member>
        <member name="M:Daany.DataFrame.FillNA(System.String,System.Func{System.Int32,System.Object})">
            <summary>
            Replaces the missing values from specified column with replacedDelegate. 
            </summary>
            <param name="col">Column to replace the missing value</param>
            <param name="replacedValue">Delegate for replaced value</param>
        </member>
        <member name="M:Daany.DataFrame.Filter(System.String[],System.Object[],Daany.FilterOperator[])">
            <summary>
            Filter data frame based on selected columns and coresponded values and operators.
            </summary>
            <param name="cols">selected columns</param>
            <param name="filteValues">filter values.</param>
            <param name="fOpers">filter operators</param>
            <returns>returns filtered df</returns>
        </member>
        <member name="M:Daany.DataFrame.Filter(System.String,System.Object,Daany.FilterOperator)">
            <summary>
            Perform data frame filtering 
            </summary>
            <param name="col"> column name to filter.</param>
            <param name="value">filter values</param>
            <param name="fOper">filter operator</param>
            <returns></returns>
        </member>
        <member name="M:Daany.DataFrame.Filter(System.Func{System.Collections.Generic.IDictionary{System.String,System.Object},System.Boolean})">
            <summary>
            Return DataFrame where each row satisfied the condition delegate 
            </summary>
            <param name="condition">The condition delegate</param>
            <returns></returns>
        </member>
        <member name="M:Daany.DataFrame.InsertColumn(System.String,System.Collections.Generic.List{System.Object},System.Int32)">
            <summary>
            Insert new columns at specific position
            </summary>
            <param name="cName">new Column name.</param>
            <param name="nPos">Zero based index position of the new column. -1 insert the column at last position.</param>
            <param name="value">column value</param>
        </member>
        <member name="M:Daany.DataFrame.InsertRow(System.Int32,System.Collections.Generic.List{System.Object},System.Object)">
            <summary>
            Inserts the row at specified position in the DataFrame
            </summary>
            <param name="nPos"></param>
            <param name="row"></param>
        </member>
        <member name="M:Daany.DataFrame.Join(Daany.DataFrame,Daany.JoinType)">
            <summary>
            Join two data frames with Inner or Left join type,based on their index.
            </summary>
            <param name="df2">Right data frame</param>
            <param name="jType">Join types. It can be Inner or Left. In case of right join call join from the second df.</param>
            <returns>New joined df.</returns>
        </member>
        <member name="M:Daany.DataFrame.Join(Daany.DataFrame,System.String[],System.String[],Daany.JoinType)">
            <summary>
            Join two df with Inner or Left join type.
            </summary>
            <param name="df2">Right data frame</param>
            <param name="leftOn">Join columns from the left df</param>
            <param name="rightOn">Join columns from the right df.</param>
            <param name="jType">Join types. It can be Inner or Left. In case of right join call join from the second df.</param>
            <returns>New joined df.</returns>
        </member>
        <member name="M:Daany.DataFrame.Merge_old(Daany.DataFrame,System.String[],System.String[],Daany.JoinType)">
            <summary>
            Merge two dfs with Inner or Left join type, by specified leftOn and RightOn columns.
            </summary>
            <param name="df2">Right data frame</param>
            <param name="leftOn">Join columns from the left df</param>
            <param name="rightOn">Join columns from the right df.</param>
            <param name="jType">Join types. It can be Inner or Left. In case of right join call join from the second df.</param>
            <returns>New joined df.</returns>
        </member>
        <member name="M:Daany.DataFrame.Merge(Daany.DataFrame,System.String[],System.String[],Daany.JoinType,System.String)">
            <summary>
            Merge two (left and right) data frames on specified leftOn and RightOn columns.
            </summary>
            <param name="df2">Second data frame.</param>
            <param name="leftOn">The list of column names for left data frames.</param>
            <param name="rightOn">The list of column names for right data frames.</param>
            <param name="jType">Join types. It can be Inner or Left. In case of right join call join from the second df.</param>
            <param name="suffix">For same column names, use suffix to make different names during merging.</param>
            <returns></returns>
        </member>
        <member name="M:Daany.DataFrame.Rename(System.ValueTuple{System.String,System.String}[])">
            <summary>
            Rename column name within the data frame.
            </summary>
            <param name="colNames">Tuple of old and new name</param>
            <returns></returns>
        </member>
        <member name="M:Daany.DataFrame.SortBy(System.String[])">
            <summary>
            Sorts data-frame by specified column in ascending order
            </summary>
            <param name="cols">Sorting columns</param>
            <returns>New ordered df.</returns>
        </member>
        <member name="M:Daany.DataFrame.SortByDescending(System.String[])">
            <summary>
            Sorts data-frame by specified column in descending order
            </summary>
            <param name="cols">Sorting columns.</param>
            <returns></returns>
        </member>
        <member name="M:Daany.DataFrame.RemoveRows(System.Func{System.Collections.Generic.IDictionary{System.String,System.Object},System.Int32,System.Boolean})">
            <summary>
            Removes rows satisfying the callback condition.
            </summary>
            <param name="removeConditions"></param>
            <returns></returns>
        </member>
        <member name="M:Daany.DataFrame.RemoveRows(System.Func{System.Object[],System.Int32,System.Boolean})">
            <summary>
            Removes rows satisfying the callback condition.
            </summary>
            <param name="removeConditions"></param>
            <returns></returns>
        </member>
        <member name="M:Daany.DataFrame.GroupBy(System.String[])">
            <summary>
            Grouping with one, two or three columns
            </summary>
            <param name="groupCols">List of grouped column names. If the list is bigger than three the exception will throw</param>
            <returns>GroupedDataFrame</returns>
        </member>
        <member name="M:Daany.DataFrame.Rolling(System.Int32,Daany.Aggregation)">
            <summary>
            Create new DataFrame containing rolling values of all column supported the aggregate operation. 
            In case the aggregation is not support for certain columns the column is dropped
            </summary>
            <param name="window">Rolling size.</param>
            <param name="agg">Aggregate operation.</param>
            <returns></returns>
        </member>
        <member name="M:Daany.DataFrame.Rolling(System.Int32,System.Collections.Generic.Dictionary{System.String,Daany.Aggregation})">
            <summary>
            Create new dataFrame containing rolling values of specified columns of the data frame
            </summary>
            <param name="window">rolling width</param>
            <param name="agg">key value pair of column and its aggregate operation.</param>
            <returns></returns>
        </member>
        <member name="M:Daany.DataFrame.Shift(System.Int32,System.String,System.String)">
            <summary>
            Shifts the values of the column by the number of 'steps' rows. 
            </summary>
            <param name="columnName">existing column to be shifted</param>
            <param name="newColName">new shifted column</param>
            <param name="step"></param>
            <returns></returns>
        </member>
        <member name="M:Daany.DataFrame.Shift(System.ValueTuple{System.String,System.String,System.Int32}[])">
            <summary>
            Shift specified columns and create new columns in data frame
            </summary>
            <param name="arg">tuple list of steps, columnName and newColName.</param>
            <returns></returns>
        </member>
        <member name="M:Daany.DataFrame.Diff(System.Int32,Daany.DiffType)">
            <summary>
            Calculates the difference of a Dataframe row compared with previous row.
            </summary>
            <param name="period"></param>
            <returns></returns>
        </member>
        <member name="M:Daany.DataFrame.TakeEvery(System.Int32,System.Boolean)">
            <summary>
            Returns data frame consisted of every nth row
            </summary>
            <param name="nthRow"></param>
            <param name="includeLast">For incomplete nthRow, select the last one</param>
            <returns></returns>
        </member>
        <member name="M:Daany.DataFrame.TakeRandom(System.Int32)">
            <summary>
            Returns data frame consisted of randomly selected n rows.
            </summary>
            <param name="rows"></param>
            <returns></returns>
        </member>
        <member name="M:Daany.DataFrame.Except(Daany.DataFrame)">
            <summary>
            Returns data frame with index element not containing in the index of the second data frame.
            Reset Index before call this method is recommended. 
            Index of the second data frame must be less of equal than the main data frame
            </summary>
            <param name="data2">Second data frame</param>
            <returns></returns>
        </member>
        <member name="M:Daany.DataFrame.Head(System.Int32)">
            <summary>
            Returns the formated string of the first  'count' rows of the data frame
            Suitable for the Jupyter notebooks
            </summary>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:Daany.DataFrame.Tail(System.Int32)">
            <summary>
            Returns the formated string of the last  'count' rows of the data frame
            Suitable for the Jupyter notebooks
            </summary>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:Daany.DataFrame.Take(System.Int32)">
            <summary>
            Returns data frame consisted of first n rows.
            </summary>
            <param name="rows"></param>
            <returns></returns>
        </member>
        <member name="M:Daany.DataFrame.ColIndex(System.String)">
            <summary>
            Returns zero based column index from the column name
            </summary>
            <param name="colName"></param>
            <returns></returns>
        </member>
        <member name="P:Daany.DataFrame.Item(System.Int32,System.Int32)">
            <summary>
            Returns specific value from Data Frame positioned at (rowIndex,colIndex )
            </summary>
            <param name="row">Zero based row index </param>
            <param name="col">Zero based col index</param>
            <returns>Object cell value</returns>
        </member>
        <member name="P:Daany.DataFrame.Item(System.String,System.Int32)">
            <summary>
            Return specific value from Data Frame positioned at (rowIndex,colIndex )
            </summary>
            <param name="col">Column name</param>
            <param name="row">Zero based row index</param>
            <returns>Object cell value</returns>
        </member>
        <member name="P:Daany.DataFrame.Item(System.String[])">
            <summary>
            Return DataFrame generated from list of columns.
            </summary>
            <param name="col"></param>
            <returns>New Data Frame</returns>
        </member>
        <member name="P:Daany.DataFrame.Item(System.String)">
            <summary>
            Return Specific Column  from Data Frame
            </summary>
            <param name="col">COlumn name</param>
            <returns>Enumerated object list</returns>
        </member>
        <member name="P:Daany.DataFrame.Item(System.Int32)">
            <summary>
            Return specific row from Data Frame
            </summary>
            <param name="row">Zero based row index</param>
            <returns>Enumerated object list.</returns>
        </member>
        <member name="M:Daany.DataFrame.RowCount">
            <summary>
            Returns the number of rows in the data frame
            </summary>
            <returns>Integer value</returns>
        </member>
        <member name="M:Daany.DataFrame.ColCount">
            <summary>
            Returns the number of columns in the data frame
            </summary>
            <returns></returns>
        </member>
        <member name="M:Daany.DataFrame.ToString">
            <summary>
            Customization of the standard ToString method.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Daany.DataFrame.AddColumn(Daany.Series)">
            <summary>
            Add series as DataFrame column 
            </summary>
            <param name="ser">series </param>
            <returns></returns>
        </member>
        <member name="M:Daany.DataFrame.AddColumns(Daany.Series[])">
            <summary>
            Add series as DataFrame columns 
            </summary>
            <param name="ser">series </param>
            <returns></returns>
        </member>
        <member name="M:Daany.DataFrame.ToSeries(System.String)">
            <summary>
            Extract a column as series object including index
            </summary>
            <param name="colName"></param>
            <returns></returns>
        </member>
        <member name="M:Daany.DataFrame.ToSeries(System.String[])">
            <summary>
            Extract a columns as array series object including index
            </summary>
            <param name="colNames"></param>
            <returns></returns>
        </member>
        <member name="M:Daany.DataFrame.ToCsv(System.String,Daany.DataFrame)">
            <summary>
            Saves data frame .NET object in a csv file.
            </summary>
            <param name="filePath">Full or relative file path.</param>
            <param name="dataFrame">Data frame to persist into file.</param>
            <returns>True if save successfully passed</returns>
        </member>
        <member name="M:Daany.DataFrame.ToCsv(System.String,Daany.DataFrame,System.String)">
            <summary>
            Saves data frame .NET object in a csv file.
            </summary>
            <param name="filePath">Full or relative file path.</param>
            <param name="dataFrame">Data frame to persist into file.</param>
            <returns>True if save successfully passed</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Daany.DataFrame.FromWeb(System.String,System.Char,System.String[],System.String,Daany.ColType[],System.Int32)" -->
        <member name="M:Daany.DataFrame.FromCsv(System.String,System.Char,System.String[],System.String,System.Boolean,Daany.ColType[],System.Char[],System.Int32,System.Int32)">
            <summary>
            Method for loading data from the file into data frame object.
            </summary>
            <param name="filePath">Full or relative path of the file.</param>
            <param name="sep"> Separator character.</param>
            <param name="names">Column names in case the columns are provided separately from the file.</param>
            <param name="dformat">Date time format.</param>
            <param name="nRows">Number of loading rows. This is handy in case we need just few rows to load in order to see how df behaves.</param>
            <param name="skipLines">Number of first lines to skip with parsing. This is handy in case we need to put description to data before actual data.</param>
            <returns>Data Frame object.</returns>
        </member>
        <member name="M:Daany.GroupDataFrame.Rolling(System.Int32,System.Collections.Generic.Dictionary{System.String,Daany.Aggregation})">
            <summary>
            Each group data frame performed rolling operation, with aggregate operation on each column
            </summary>
            <param name="rollingWindow">size of rolling</param>
            <param name="agg"></param>
            <returns></returns>
        </member>
        <member name="M:Daany.GroupDataFrame.Shift(System.ValueTuple{System.String,System.String,System.Int32}[])">
            <summary>
            Shifts the values of the columns by the number of 'steps' rows in every grouped data frame. 
            </summary>
            <param name="columnName">existing column to be shifted</param>
            <param name="newColName">new shifted column</param>
            <param name="step"></param>
            <returns></returns>
        </member>
        <member name="M:Daany.GroupDataFrame.Aggregate(System.Collections.Generic.IDictionary{System.String,Daany.Aggregation})">
            <summary>
            Aggregate columns of each data fame in grups
            </summary>
            <param name="agg">List of columns to aggregate. Grouped columns are excluded from aggregation.</param>
            <returns></returns>
        </member>
        <member name="M:Daany.GroupDataFrame.GCount">
            <summary>
            Returns data frame of number of rows for each group
            </summary>
            <returns></returns>
        </member>
        <member name="M:Daany.GroupDataFrame.Transform(System.Func{Daany.DataFrame,Daany.DataFrame})">
            <summary>
            Perform transformation on each grouped data frame.
            </summary>
            <param name="callBack"></param>
            <returns></returns>
        </member>
        <member name="M:Daany.Series.ToRegressors(System.Int32)">
            <summary>
            Create X and Y matrices for regression analysis.
            </summary>
            <param name="order"></param>
            <returns></returns>
        </member>
        <member name="M:Daany.Series.TSToDataFrame(System.Int32)">
            <summary>
            Transform time series into data frame set.
            Columns are constructed of previous Y values called lags.
            </summary>
            <param name="lags"></param>
            <param name="addConstantTerm"></param>
            <returns></returns>
        </member>
        <member name="M:Daany.Series.MissingValues">
            <summary>
            Return number of missing values in the Series.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Daany.Series.op_Subtraction(Daany.Series,Daany.Series)">
            <summary>
            Element-wise subtraction of two series
            </summary>
            <param name="ser1"></param>
            <param name="ser2"></param>
            <returns></returns>
        </member>
        <member name="M:Daany.Series.op_Addition(Daany.Series,Daany.Series)">
            <summary>
            Element-wise addition of two series
            </summary>
            <param name="ser1"></param>
            <param name="ser2"></param>
            <returns></returns>
        </member>
        <member name="M:Daany.Series.op_Addition(Daany.Series,System.Single)">
            <summary>
            Addition series element with floating scalar value
            </summary>
            <param name="ser1"></param>
            <param name="scalar"></param>
            <returns></returns>
        </member>
        <member name="M:Daany.Series.op_Multiply(Daany.Series,Daany.Series)">
            <summary>
            Element-wise multiplication of two series
            </summary>
            <param name="ser1"></param>
            <param name="ser2"></param>
            <returns></returns>
        </member>
        <member name="M:Daany.Series.op_Multiply(Daany.Series,System.Single)">
            <summary>
            Multiplication series element with floating scalar value
            </summary>
            <param name="ser1"></param>
            <param name="scalar"></param>
            <returns></returns>
        </member>
        <member name="M:Daany.SortDataFrame.quickSort(System.Collections.Generic.List{System.Object},System.Collections.Generic.List{System.Object},System.Int32,System.Int32,System.Int32[])">
            <summary>
            Classic QuickSort algorithm for sorting 
            </summary>
            <param name="init"></param>
            <param name="end"></param>
            <param name="cols"></param>
        </member>
        <member name="T:Daany.CsvReader">
            <summary>
            Fast and memory efficient implementation of CSV reader (3x times faster than CsvHelper).
            </summary>
            <remarks>API is similar to CSVHelper CsvReader.</remarks>
        </member>
        <member name="P:Daany.CsvReader.BufferSize">
            <summary>
            Size of the circular buffer. Buffer size limits max length of the CSV line that can be processed. 
            </summary>
            <remarks>Default buffer size is 32kb.</remarks>
        </member>
        <member name="P:Daany.CsvReader.TrimFields">
            <summary>
            If true start/end spaces are excluded from field values (except values in quotes). True by default.
            </summary>
        </member>
        <member name="T:Daany.CsvWriter">
            <summary>
            Fast and efficient implementation of CSV writer.
            </summary>
            <remarks>API is similar to CSVHelper CsvWriter class</remarks>
        </member>
        <member name="T:Daany.nc">
            <summary>
            Class implementation for generating various vector or matrix numbers and elements.
            nc - stands for 
            </summary>
        </member>
        <member name="M:Daany.nc.Rand(System.Int32,System.Int32)">
            <summary>
            Create vector of randomly generated double values stored in 1D array. 
            Vector.Length = row * col
            </summary>
            <param name="row"></param>
            <param name="col"></param>
            <returns></returns>
        </member>
    </members>
</doc>
